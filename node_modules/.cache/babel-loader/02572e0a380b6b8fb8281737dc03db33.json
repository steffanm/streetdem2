{"ast":null,"code":"/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isRefObject(value) {\n  return value != null && typeof value !== \"function\";\n}\nexport function isRefCallback(value) {\n  return typeof value === \"function\";\n}\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\n\nexport function setRef(refTarget, ref) {\n  if (isRefObject(refTarget)) {\n    refTarget.current = ref;\n  } else if (isRefCallback(refTarget)) {\n    refTarget(ref);\n  }\n}\n/** @deprecated use mergeRefs() instead */\n\nexport function combineRefs(ref1, ref2) {\n  return mergeRefs(ref1, ref2);\n}\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\n\nexport function mergeRefs() {\n  var refs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n\n  return function (value) {\n    refs.forEach(function (ref) {\n      setRef(ref, value);\n    });\n  };\n}\nexport function getRef(ref) {\n  var _a;\n\n  if (ref === null) {\n    return null;\n  }\n\n  return (_a = ref.current) !== null && _a !== void 0 ? _a : ref;\n}\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\n\nexport function refHandler(refTargetParent, refTargetKey, refProp) {\n  return function (ref) {\n    refTargetParent[refTargetKey] = ref;\n    setRef(refProp, ref);\n  };\n}","map":{"version":3,"sources":["../../../src/common/refs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AASH,OAAM,SAAU,WAAV,CAA6C,KAA7C,EAA8E;AAChF,SAAO,KAAK,IAAI,IAAT,IAAiB,OAAO,KAAP,KAAiB,UAAzC;AACH;AAID,OAAM,SAAU,aAAV,CAA+C,KAA/C,EAAgF;AAClF,SAAO,OAAO,KAAP,KAAiB,UAAxB;AACH;AAED;;AAEG;;AACH,OAAM,SAAU,MAAV,CAAwC,SAAxC,EAA+E,GAA/E,EAA4F;AAC9F,MAAI,WAAW,CAAI,SAAJ,CAAf,EAA+B;AAC3B,IAAA,SAAS,CAAC,OAAV,GAAoB,GAApB;AACH,GAFD,MAEO,IAAI,aAAa,CAAC,SAAD,CAAjB,EAA8B;AACjC,IAAA,SAAS,CAAC,GAAD,CAAT;AACH;AACJ;AAED;;AACA,OAAM,SAAU,WAAV,CAA6C,IAA7C,EAAoE,IAApE,EAAyF;AAC3F,SAAO,SAAS,CAAC,IAAD,EAAO,IAAP,CAAhB;AACH;AAED;;;AAGG;;AACH,OAAM,SAAU,SAAV,GAAmB;AAAwB,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA8B;AAA9B,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC7C,SAAO,UAAA,KAAA,EAAK;AACR,IAAA,IAAI,CAAC,OAAL,CAAa,UAAA,GAAA,EAAG;AACZ,MAAA,MAAM,CAAC,GAAD,EAAM,KAAN,CAAN;AACH,KAFD;AAGH,GAJD;AAKH;AAED,OAAM,SAAU,MAAV,CAAwC,GAAxC,EAAqE;;;AACvE,MAAI,GAAG,KAAK,IAAZ,EAAkB;AACd,WAAO,IAAP;AACH;;AAED,SAAA,CAAA,EAAA,GAAQ,GAAqB,CAAC,OAA9B,MAAqC,IAArC,IAAqC,EAAA,KAAA,KAAA,CAArC,GAAqC,EAArC,GAA0C,GAA1C;AACH;AAED;;;;;AAKG;;AACH,OAAM,SAAU,UAAV,CACF,eADE,EAEF,YAFE,EAGF,OAHE,EAGkC;AAEpC,SAAO,UAAC,GAAD,EAAc;AACjB,IAAA,eAAe,CAAC,YAAD,CAAf,GAAgC,GAAhC;AACA,IAAA,MAAM,CAAC,OAAD,EAAU,GAAV,CAAN;AACH,GAHD;AAIH","sourceRoot":"","sourcesContent":["/*\n * Copyright 2020 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function isRefObject(value) {\n    return value != null && typeof value !== \"function\";\n}\nexport function isRefCallback(value) {\n    return typeof value === \"function\";\n}\n/**\n * Assign the given ref to a target, either a React ref object or a callback which takes the ref as its first argument.\n */\nexport function setRef(refTarget, ref) {\n    if (isRefObject(refTarget)) {\n        refTarget.current = ref;\n    }\n    else if (isRefCallback(refTarget)) {\n        refTarget(ref);\n    }\n}\n/** @deprecated use mergeRefs() instead */\nexport function combineRefs(ref1, ref2) {\n    return mergeRefs(ref1, ref2);\n}\n/**\n * Utility for merging refs into one singular callback ref.\n * If using in a functional component, would recomend using `useMemo` to preserve function identity.\n */\nexport function mergeRefs() {\n    var refs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        refs[_i] = arguments[_i];\n    }\n    return function (value) {\n        refs.forEach(function (ref) {\n            setRef(ref, value);\n        });\n    };\n}\nexport function getRef(ref) {\n    var _a;\n    if (ref === null) {\n        return null;\n    }\n    return (_a = ref.current) !== null && _a !== void 0 ? _a : ref;\n}\n/**\n * Creates a ref handler which assigns the ref returned by React for a mounted component to a field on the target object.\n * The target object is usually a component class.\n *\n * If provided, it will also update the given `refProp` with the value of the ref.\n */\nexport function refHandler(refTargetParent, refTargetKey, refProp) {\n    return function (ref) {\n        refTargetParent[refTargetKey] = ref;\n        setRef(refProp, ref);\n    };\n}\n//# sourceMappingURL=refs.js.map"]},"metadata":{},"sourceType":"module"}