{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { IconSvgPaths16, IconSvgPaths20 } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nexport var IconSize;\n\n(function (IconSize) {\n  IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n  IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\n\nvar Icon =\n/** @class */\nfunction (_super) {\n  __extends(Icon, _super);\n\n  function Icon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Icon.prototype.render = function () {\n    var icon = this.props.icon;\n\n    if (icon == null || typeof icon === \"boolean\") {\n      return null;\n    } else if (typeof icon !== \"string\") {\n      return icon;\n    }\n\n    var _a = this.props,\n        className = _a.className,\n        color = _a.color,\n        htmlTitle = _a.htmlTitle,\n        // eslint-disable-next-line deprecation/deprecation\n    iconSize = _a.iconSize,\n        intent = _a.intent,\n        _b = _a.size,\n        size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b,\n        title = _a.title,\n        _c = _a.tagName,\n        tagName = _c === void 0 ? \"span\" : _c,\n        htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]); // choose which pixel grid is most appropriate for given icon size\n\n\n    var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD; // render path elements, or nothing if icon name is unknown.\n\n    var paths = this.renderSvgPaths(pixelGridSize, icon); // eslint-disable-next-line deprecation/deprecation\n\n    var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n    var viewBox = \"0 0 \" + pixelGridSize + \" \" + pixelGridSize;\n    return React.createElement(tagName, __assign(__assign({}, htmlprops), {\n      \"aria-hidden\": title ? undefined : true,\n      className: classes,\n      title: htmlTitle\n    }), React.createElement(\"svg\", {\n      fill: color,\n      \"data-icon\": icon,\n      width: size,\n      height: size,\n      viewBox: viewBox\n    }, title && React.createElement(\"desc\", null, title), paths));\n  };\n  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n\n\n  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n    var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n    var pathStrings = svgPathsRecord[iconName];\n\n    if (pathStrings == null) {\n      return null;\n    }\n\n    return pathStrings.map(function (d, i) {\n      return React.createElement(\"path\", {\n        key: i,\n        d: d,\n        fillRule: \"evenodd\"\n      });\n    });\n  };\n\n  Icon.displayName = DISPLAYNAME_PREFIX + \".Icon\";\n  /** @deprecated use IconSize.STANDARD */\n\n  Icon.SIZE_STANDARD = IconSize.STANDARD;\n  /** @deprecated use IconSize.LARGE */\n\n  Icon.SIZE_LARGE = IconSize.LARGE;\n  Icon = __decorate([polyfill], Icon);\n  return Icon;\n}(AbstractPureComponent2);\n\nexport { Icon };","map":{"version":3,"sources":["../../../../src/components/icon/icon.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH,OAAO,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,SAAS,QAAT,QAAyB,yBAAzB;AAEA,SAAmB,cAAnB,EAAmC,cAAnC,QAAyD,oBAAzD;AAEA,SAAS,sBAAT,EAAiC,OAAjC,EAA0C,kBAA1C,QAAsG,cAAtG;AAIA,OAAA,IAAY,QAAZ;;AAAA,CAAA,UAAY,QAAZ,EAAoB;AAChB,EAAA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA;AACA,EAAA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA;AACH,CAHD,EAAY,QAAQ,KAAR,QAAQ,GAAA,EAAA,CAApB;;AAgFA,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0B,EAAA,SAAA,CAAA,IAAA,EAAA,MAAA,CAAA;;AAA1B,WAAA,IAAA,GAAA;;AA+DC;;AAtDU,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACY,QAAA,IAAI,GAAK,KAAK,KAAL,CAAL,IAAJ;;AACR,QAAI,IAAI,IAAI,IAAR,IAAgB,OAAO,IAAP,KAAgB,SAApC,EAA+C;AAC3C,aAAO,IAAP;AACH,KAFD,MAEO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACjC,aAAO,IAAP;AACH;;AAED,QAAM,EAAA,GAWF,KAAK,KAXT;AAAA,QACI,SAAS,GAAA,EAAA,CAAA,SADb;AAAA,QAEI,KAAK,GAAA,EAAA,CAAA,KAFT;AAAA,QAGI,SAAS,GAAA,EAAA,CAAA,SAHb;AAAA,QAII;AACA,IAAA,QAAQ,GAAA,EAAA,CAAA,QALZ;AAAA,QAMI,MAAM,GAAA,EAAA,CAAA,MANV;AAAA,QAOI,EAAA,GAAA,EAAA,CAAA,IAPJ;AAAA,QAOI,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAA,QAAA,GAAY,QAAQ,CAAC,QAAxB,GAAgC,EAPxC;AAAA,QAQI,KAAK,GAAA,EAAA,CAAA,KART;AAAA,QASI,EAAA,GAAA,EAAA,CAAA,OATJ;AAAA,QASI,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,MAAH,GAAS,EATpB;AAAA,QAUO,SAAS,GAAA,MAAA,CAAA,EAAA,EAVV,CAAA,WAAA,EAAA,OAAA,EAAA,WAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,CAUU,CAVhB,CARJ,CAqBI;;;AACA,QAAM,aAAa,GAAG,IAAI,IAAI,QAAQ,CAAC,KAAjB,GAAyB,QAAQ,CAAC,KAAlC,GAA0C,QAAQ,CAAC,QAAzE,CAtBJ,CAuBI;;AACA,QAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,aAApB,EAAmC,IAAnC,CAAd,CAxBJ,CA0BI;;AACA,QAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,IAAT,EAAe,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAf,EAAwC,OAAO,CAAC,WAAR,CAAoB,MAApB,CAAxC,EAAqE,SAArE,CAA1B;AACA,QAAM,OAAO,GAAG,SAAO,aAAP,GAAoB,GAApB,GAAwB,aAAxC;AAEA,WAAO,KAAK,CAAC,aAAN,CACH,OADG,EACI,QAAA,CAAA,QAAA,CAAA,EAAA,EAEA,SAFA,CAAA,EAES;AACZ,qBAAe,KAAK,GAAG,SAAH,GAAe,IADvB;AAEZ,MAAA,SAAS,EAAE,OAFC;AAGZ,MAAA,KAAK,EAAE;AAHK,KAFT,CADJ,EAQH,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,IAAI,EAAE,KAAX;AAAgB,mBAAa,IAA7B;AAAmC,MAAA,KAAK,EAAE,IAA1C;AAAgD,MAAA,MAAM,EAAE,IAAxD;AAA8D,MAAA,OAAO,EAAE;AAAvE,KAAA,EACK,KAAK,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAO,KAAP,CADd,EAEK,KAFL,CARG,CAAP;AAaH,GA3CM;AA6CP;;;AACQ,EAAA,IAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,SAAvB,EAA0C,QAA1C,EAA4D;AACxD,QAAM,cAAc,GAAG,SAAS,KAAK,QAAQ,CAAC,QAAvB,GAAkC,cAAlC,GAAmD,cAA1E;AACA,QAAM,WAAW,GAAG,cAAc,CAAC,QAAD,CAAlC;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACrB,aAAO,IAAP;AACH;;AACD,WAAO,WAAW,CAAC,GAAZ,CAAgB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,aAAA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,QAAA,GAAG,EAAE,CAAX;AAAc,QAAA,CAAC,EAAE,CAAjB;AAAoB,QAAA,QAAQ,EAA5B;AAAA,OAAA,CAAA;AAAyC,KAAnE,CAAP;AACH,GAPO;;AAtDM,EAAA,IAAA,CAAA,WAAA,GAAiB,kBAAkB,GAAA,OAAnC;AAEd;;AACuB,EAAA,IAAA,CAAA,aAAA,GAAgB,QAAQ,CAAC,QAAzB;AAEvB;;AACuB,EAAA,IAAA,CAAA,UAAA,GAAa,QAAQ,CAAC,KAAtB;AAPd,EAAA,IAAI,GAAA,UAAA,CAAA,CADhB,QACgB,CAAA,EAAJ,IAAI,CAAJ;AA+Db,SAAA,IAAA;AAAC,CA/DD,CAA0B,sBAA1B,CAAA;;SAAa,I","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { __assign, __decorate, __extends, __rest } from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { polyfill } from \"react-lifecycles-compat\";\nimport { IconSvgPaths16, IconSvgPaths20 } from \"@blueprintjs/icons\";\nimport { AbstractPureComponent2, Classes, DISPLAYNAME_PREFIX } from \"../../common\";\nexport var IconSize;\n(function (IconSize) {\n    IconSize[IconSize[\"STANDARD\"] = 16] = \"STANDARD\";\n    IconSize[IconSize[\"LARGE\"] = 20] = \"LARGE\";\n})(IconSize || (IconSize = {}));\nvar Icon = /** @class */ (function (_super) {\n    __extends(Icon, _super);\n    function Icon() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Icon.prototype.render = function () {\n        var icon = this.props.icon;\n        if (icon == null || typeof icon === \"boolean\") {\n            return null;\n        }\n        else if (typeof icon !== \"string\") {\n            return icon;\n        }\n        var _a = this.props, className = _a.className, color = _a.color, htmlTitle = _a.htmlTitle, \n        // eslint-disable-next-line deprecation/deprecation\n        iconSize = _a.iconSize, intent = _a.intent, _b = _a.size, size = _b === void 0 ? iconSize !== null && iconSize !== void 0 ? iconSize : IconSize.STANDARD : _b, title = _a.title, _c = _a.tagName, tagName = _c === void 0 ? \"span\" : _c, htmlprops = __rest(_a, [\"className\", \"color\", \"htmlTitle\", \"iconSize\", \"intent\", \"size\", \"title\", \"tagName\"]);\n        // choose which pixel grid is most appropriate for given icon size\n        var pixelGridSize = size >= IconSize.LARGE ? IconSize.LARGE : IconSize.STANDARD;\n        // render path elements, or nothing if icon name is unknown.\n        var paths = this.renderSvgPaths(pixelGridSize, icon);\n        // eslint-disable-next-line deprecation/deprecation\n        var classes = classNames(Classes.ICON, Classes.iconClass(icon), Classes.intentClass(intent), className);\n        var viewBox = \"0 0 \" + pixelGridSize + \" \" + pixelGridSize;\n        return React.createElement(tagName, __assign(__assign({}, htmlprops), { \"aria-hidden\": title ? undefined : true, className: classes, title: htmlTitle }), React.createElement(\"svg\", { fill: color, \"data-icon\": icon, width: size, height: size, viewBox: viewBox },\n            title && React.createElement(\"desc\", null, title),\n            paths));\n    };\n    /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */\n    Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {\n        var svgPathsRecord = pathsSize === IconSize.STANDARD ? IconSvgPaths16 : IconSvgPaths20;\n        var pathStrings = svgPathsRecord[iconName];\n        if (pathStrings == null) {\n            return null;\n        }\n        return pathStrings.map(function (d, i) { return React.createElement(\"path\", { key: i, d: d, fillRule: \"evenodd\" }); });\n    };\n    Icon.displayName = DISPLAYNAME_PREFIX + \".Icon\";\n    /** @deprecated use IconSize.STANDARD */\n    Icon.SIZE_STANDARD = IconSize.STANDARD;\n    /** @deprecated use IconSize.LARGE */\n    Icon.SIZE_LARGE = IconSize.LARGE;\n    Icon = __decorate([\n        polyfill\n    ], Icon);\n    return Icon;\n}(AbstractPureComponent2));\nexport { Icon };\n//# sourceMappingURL=icon.js.map"]},"metadata":{},"sourceType":"module"}